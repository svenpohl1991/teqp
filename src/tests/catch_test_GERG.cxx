#include <catch2/catch_test_macros.hpp>
#include <catch2/catch_approx.hpp>

using Catch::Approx;

#include <catch2/matchers/catch_matchers_floating_point.hpp>
using Catch::Matchers::WithinAbsMatcher;
using Catch::Matchers::WithinRelMatcher;
using Catch::Matchers::WithinRel;

#include "teqp/models/GERG/GERG.hpp"
#include "teqp/derivs.hpp"
#include "teqp/json_tools.hpp"
#include "teqp/math/finite_derivs.hpp"

#include "GERG2008.cpp"

using namespace teqp;

// Imports from boost
#include <boost/multiprecision/cpp_bin_float.hpp>
using namespace boost::multiprecision;

TEST_CASE("Load all GERG2004 models", "[GERG2004]"){
    const auto& names = GERG2004::component_names;
    REQUIRE(names.size() == 18);
    
    for (auto &name : names){
        CHECK_NOTHROW(GERG2004::get_pure_info(name));
    }
    
    for (auto &name : names){
        CHECK_NOTHROW(GERG2004::get_pure_coeffs(name));
        CHECK(GERG2004::get_pure_coeffs(name).sizes().size() == 1);
    }
    CHECK_THROWS(GERG2004::get_pure_info("NOT A FLUID"));
    
    for (auto i = 0U; i < names.size(); ++i){
        for (auto j = i+1; j < names.size(); ++j){
            CHECK_NOTHROW(GERG2004::get_betasgammas(names[i], names[j]));
            CHECK_NOTHROW(GERG2004::get_betasgammas(names[j], names[i]));
            CAPTURE(i);
            CAPTURE(j);
            CHECK_NOTHROW(GERG2004::GERG200XReducing({names[i], names[j]}, GERG2004::get_pure_info, GERG2004::get_betasgammas));
            auto Fij = GERG2004::get_Fij(names[i], names[j]);
            
            if (Fij){
                CHECK_NOTHROW(GERG2004::get_departurecoeffs(names[i], names[j]));
                CHECK(GERG2004::get_departurecoeffs(names[i], names[j]).sizes().size() == 1);
            }
            else{
                CHECK_THROWS(GERG2004::get_departurecoeffs(names[i], names[j]));
            }
        }
    }
    CHECK_THROWS(GERG2004::get_betasgammas("NOT A FLUID","water"));
    CHECK_NOTHROW(GERG2004::GERG200XCorrespondingStatesTerm(names, GERG2004::get_pure_coeffs));
    CHECK_NOTHROW(GERG2004::GERG2004ResidualModel(names));
}

TEST_CASE("Load all GERG2004idealgas models", "[GERG2004]"){
    const auto& names = GERG2004::component_names;
    REQUIRE(names.size() == 18);
    CHECK_NOTHROW(GERG2004::GERG2004IdealGasModel(names));
}

TEST_CASE("Load all GERG2008idealgas models", "[GERG2008]"){
    const auto& names = GERG2008::component_names;
    REQUIRE(names.size() == 21);
    CHECK_NOTHROW(GERG2008::GERG2008IdealGasModel(names));
}

TEST_CASE("Load all GERG2008 models", "[GERG2008]"){
    const auto& names = GERG2008::component_names;
    REQUIRE(names.size() == 21);
    
    for (auto &name : names){
        CHECK_NOTHROW(GERG2008::get_pure_info(name));
    }
    
    for (auto &name : names){
        CHECK_NOTHROW(GERG2008::get_pure_coeffs(name));
        CHECK(GERG2008::get_pure_coeffs(name).sizes().size() == 1);
    }
    CHECK_THROWS(GERG2008::get_pure_info("NOT A FLUID"));
    
    for (auto i = 0U; i < names.size(); ++i){
        for (auto j = i+1; j < names.size(); ++j){
            CHECK_NOTHROW(GERG2008::get_betasgammas(names[i], names[j]));
            CHECK_NOTHROW(GERG2008::get_betasgammas(names[j], names[i]));
            CAPTURE(i);
            CAPTURE(j);
            CHECK_NOTHROW(GERG2008::GERG200XReducing({names[i], names[j]}, GERG2008::get_pure_info, GERG2008::get_betasgammas));
            auto Fij = GERG2008::get_Fij(names[i], names[j]);
            
            if (Fij){
                CHECK_NOTHROW(GERG2008::get_departurecoeffs(names[i], names[j]));
                CHECK(GERG2008::get_departurecoeffs(names[i], names[j]).sizes().size() == 1);
            }
            else{
                CHECK_THROWS(GERG2008::get_departurecoeffs(names[i], names[j]));
            }
        }
    }
    CHECK_THROWS(GERG2008::get_betasgammas("NOT A FLUID","water"));
    CHECK_NOTHROW(GERG2008::GERG200XCorrespondingStatesTerm(names, GERG2008::get_pure_coeffs));
    CHECK_NOTHROW(GERG2008::GERG2008ResidualModel(names));
}


// A structure to hold the values for one validation call
struct G08El
{
    int GasNo;
    double T_K, D_molL, P_MPa, cv_JmolK, cp_JmolK, w_ms;
};

// Mole percentages!
std::vector<std::vector<double> > mixture_comps = {
    {99.69531,0.2016,0.00937,0.07671,0.00679,0.00197,0.00068,0.00156,0,0,0,0,0,0,0,0,0,0,0,0.00601,0},
    {99.5494,0.3672,0.047,0.0344,0,0,0,0,0,0.001,0.001,0,0,0,0,0,0,0,0,0,0},
    {99.28959,0.3683,0.21808,0.09224,0.0095,0.00174,0.00118,0.00048,0,0,0,0,0,0,0,0,0,0,0,0.01889,0},
    {99.2875,0.5122,0.04833,0.12665,0.00983,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01549,0},
    {99.15997,0.56734,0.11887,0.13489,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01893,0},
    {99.06261,0.86044,0.05602,0.01077,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01016,0},
    {98.69541,0.9137,0.37495,0.00651,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00943,0},
    {98.306,0,1.694,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {98.36206,1.29427,0.26024,0.05756,0,0.00584,0,0.00118,0,0,0,0,0,0,0,0,0,0,0,0.01885,0},
    {98.34086,0.86109,0.76775,0.00879,0.00384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01767,0},
    {98.110602,0.813399,0.1209,0.611199,0.2153,0.0339,0.0453,0.0115,0.00925,0.006,0.0061,0.0028,0.0003,0.00005,0,0,0,0,0,0.0134,0},
    {97.474689,0.382492,1.125685,0.947428,0.068591,0,0,0,0,0,0,0,0,0,0,0.001115,0,0,0,0,0},
    {97.18,0.629,1.711,0.454,0.022,0.002,0.002,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {96.675,1.931,0,1.345,0.046,0.001,0.002,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {96.6039,3.0703,0.3109,0.0149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {96.531,0.894,0.663,1.709,0.149,0.016,0.025,0.006,0.004,0.002,0.001,0,0,0,0,0,0,0,0,0,0},
    {96.370276,0.291926,0.298014,1.400282,0.780001,0.14425,0.460146,0.0759,0.0549,0.124306,0,0,0,0,0,0,0,0,0,0,0},
    {96.218,0.346,0.815,1.4,0.496,0.196,0.145,0.089,0.053,0.242,0,0,0,0,0,0,0,0,0,0,0},
    {96.167,0.66,0.16,2.066,0.626,0.086,0.125,0.035,0.031,0.027,0.013,0.004,0,0,0,0,0,0,0,0,0},
    {96.0217,0.0914,1.82778,1.58387,0.28571,0.05895,0.04797,0.02461,0.01342,0.03928,0,0,0,0,0,0,0,0,0,0.00531,0},
    {95.924,0.089,2.429,1.282,0.198,0.022,0.015,0.01,0.001,0.03,0,0,0,0,0,0,0,0,0,0,0},
    {95.485503,0.25073,0.814426,3.120734,0.305107,0,0,0,0,0.0235,0,0,0,0,0,0,0,0,0,0,0},
    {95.485,1.5987,0.5995,1.8984,0.177,0.0154,0.02013,0.005,0.003,0.003,0,0,0,0,0.1599,0,0,0,0,0.03497,0},
    {95.468539,0.246562,0.976951,1.965924,0.687402,0.167186,0.204834,0.0852,0.0655,0.131902,0,0,0,0,0,0,0,0,0,0,0},
    {95.29257,1.4941,0.6137,2.1226,0.207,0.0094,0.013,0.00177,0.0013,0.00196,0,0,0,0,0.2105,0,0,0,0,0.0321,0},
    {95.19,1.3,0.7,2.5,0.2,0.03,0.03,0.01,0.01,0.004,0.002,0.002,0,0,0,0.02,0,0.002,0,0,0},
    {95.12963,0.14167,4.51793,0.10715,0.07112,0.0216,0.00516,0.00144,0,0,0,0,0,0,0,0,0,0,0,0.0043,0},
    {95.1278,0.4483,1.5803,2.1265,0.388,0.0852,0.0964,0.0438,0.0288,0.03745,0.03745,0,0,0,0,0,0,0,0,0,0},
    {95.123,0.089,2.555,1.835,0.238,0.04,0.016,0.014,0.011,0.079,0,0,0,0,0,0,0,0,0,0,0},
    {95.065106,0.21485,1.25606,2.427795,0.49213,0.108789,0.106762,0.073877,0.068847,0.089252,0.072182,0.017708,0.005126,0.000552,0,0.000963,0,0,0,0,0},
    {94.8987,0.0075,0,3.7404,0.931,0.231,0.1836,0.0074,0.0004,0,0,0,0,0,0,0,0,0,0,0,0},
    {94.806,0.084,3.166,1.547,0.231,0.024,0.019,0.014,0.028,0.081,0,0,0,0,0,0,0,0,0,0,0},
    {94.725,1.7425,0.7459,2.2003,0.333,0.0545,0.0737,0.0279,0.0205,0.0194,0.0088,0.0038,0.001,0,0.0129,0.0288,0,0.002,0,0,0},
    {94.609,0.924,3.331,1.095,0.041,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {94.606705,0.178168,1.188857,2.479371,0.459308,0.094474,0.105551,0.087094,0.061014,0.191996,0.246145,0.237172,0.060691,0.002781,0,0.000672,0,0,0,0,0},
    {94.5487,2.349,0.561,2.0869,0.288,0.0299,0.0693,0.0211,0.0182,0.0116,0.0105,0.0049,0.0005,0.0004,0,0,0,0,0,0,0},
    {94.50248,0.3018,0.6028,2.7308,0.9948,0.2498,0.2735,0.12,0.0763,0.0833,0.0452,0.0153,0.00392,0,0,0,0,0,0,0,0},
    {94.46603,0.494,0.84028,1.81705,1.14551,0.30879,0.47012,0.1627,0.10109,0.17922,0,0,0,0,0,0,0,0,0,0.01521,0},
    {94.3627,0.2463,0.9726,2.6069,0.9541,0.2723,0.2345,0.1071,0.0712,0.1723,0,0,0,0,0,0,0,0,0,0,0},
    {94.329,0.062,2.103,2.31,0.671,0.103,0.115,0.048,0.037,0.222,0,0,0,0,0,0,0,0,0,0,0},
    {94.3127,1.3696,0.7678,3.1501,0.3198,0.0243,0.0332,0.0065,0.0052,0.007236,0.003132,0.000432,0,0,0,0,0,0,0,0,0},
    {94.27798,0.11705,1.55146,2.86558,0.71038,0.13411,0.13665,0.06285,0.03614,0.10138,0,0,0,0,0,0,0,0,0,0.00642,0},
    {94.2344,0.646,1.611,2.694,0.452,0.089,0.101,0.042,0.027,0.031,0.022,0.009,0.002,0.0006,0.004,0,0,0,0,0.035,0},
    {94.056896,0.26329,0.399681,3.089199,1.372261,0.186449,0.342525,0.0913,0.0874,0.0555,0.0555,0,0,0,0,0,0,0,0,0,0},
    {94.01163,2.18087,0.08967,2.05712,0.89961,0.14084,0.20385,0.16781,0.18605,0.02375,0,0,0,0,0,0,0,0,0,0.0388,0},
    {93.998912,0.316537,1.284648,2.650034,0.982546,0.24702,0.256324,0.102139,0.076741,0.0851,0,0,0,0,0,0,0,0,0,0,0},
    {93.95949,5.675,0,0.2804,0.0176,0.0024,0.0024,0.001,0.0009,0.0003,0.0004,0.0001,0.00001,0,0,0,0,0,0,0.06,0},
    {93.9566,4.5259,1.5175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {93.913996,0.237979,1.016264,3.914341,0.742569,0.0759,0.059082,0.0172,0.00837,0.0143,0,0,0,0,0,0,0,0,0,0,0},
    {93.85591,0.34655,0.92581,2.45284,1.13853,0.3116,0.33756,0.13582,0.10387,0.27365,0.07191,0.04095,0.002,0.003,0,0,0,0,0,0,0},
    {93.81568,0.25567,4.96027,0.26704,0.42695,0.11119,0.06312,0.03125,0.0071,0.05132,0,0,0,0,0,0,0,0,0,0.01041,0},
    {93.502,0.512,0.957,3.013,1.005,0.292,0.27,0.133,0.082,0.234,0,0,0,0,0,0,0,0,0,0,0},
    {93.3574,0.1104,0.7971,3.8551,1.0291,0.2289,0.2087,0.0891,0.0598,0.2644,0,0,0,0,0,0,0,0,0,0,0},
    {93.098,0.078,1.694,2.963,1.174,0.23,0.313,0.118,0.087,0.245,0,0,0,0,0,0,0,0,0,0,0},
    {92.897,0.113,2.32,2.852,0.874,0.188,0.207,0.103,0.076,0.37,0,0,0,0,0,0,0,0,0,0,0},
    {92.892,0.86,1.098,3.936,0.774,0.096,0.149,0.038,0.028,0.023,0.014,0.004,0,0,0.042,0.003,0,0,0,0.04,0.003},
    {92.9619,2.632,1.207,2.6674,0.3038,0.0396,0.068,0.0194,0.0247,0.0114,0.0069,0.0034,0.0005,0,0,0,0,0,0,0.054,0},
    {92.821,0.492,0.133,2.599,1.946,0.308,0.764,0.218,0.25,0.224,0.164,0.081,0,0,0,0,0,0,0,0,0},
    {92.884157,0.827584,0.877833,3.321687,1.027678,0.137811,0.294644,0.109147,0.13939,0.122191,0.168669,0.067254,0.018879,0.001072,0,0.002007,0,0,0,0,0},
    {92.770458,0.108454,0.745392,4.261351,1.192365,0.262195,0.244552,0.100902,0.0694,0.088,0.083,0.062631,0.0113,0,0,0,0,0,0,0,0},
    {92.665,0.164,1.713,3.083,1.143,0.349,0.293,0.14,0.087,0.159,0.09,0.057,0.018,0.039,0,0,0,0,0,0,0},
    {92.469,0.113,2.571,3.158,0.932,0.211,0.201,0.071,0.044,0.23,0,0,0,0,0,0,0,0,0,0,0},
    {92.288,0.381,0.59,3.521,1.89,0.35,0.446,0.129,0.088,0.317,0,0,0,0,0,0,0,0,0,0,0},
    {92.208,6.196,0.549,0.629,0.134,0.038,0.049,0.028,0.022,0.09849,0.04263,0.00588,0,0,0,0,0,0,0,0,0},
    {92.173,0.303,1.088,3.37,1.335,0.367,0.466,0.237,0.175,0.486,0,0,0,0,0,0,0,0,0,0,0},
    {92.1244,1.1733,0.9663,4.3547,0.9299,0.093,0.1218,0.0259,0.024,0.0147,0,0,0,0,0.1427,0,0,0,0,0.0293,0},
    {92.07,0.9,1.97,4.63,0.35,0.03,0.04,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {92.067257,0.157545,0.679069,4.805366,1.520166,0.306933,0.283102,0.0372,0.00244,0.140922,0,0,0,0,0,0,0,0,0,0,0},
    {92.066,0.246,0.431,3.259,1.949,0.426,0.77,0.256,0.222,0.179,0.131,0.065,0,0,0,0,0,0,0,0,0},
    {92.03649,2.3046,0.13287,2.38147,1.70895,0.36904,0.65858,0.17845,0.13289,0.04541,0,0,0,0,0,0,0,0,0,0.05125,0},
    {92.015043,0.13873,0.47158,4.28605,2.04799,0.33852,0.51189,0.10219,0.07189,0.000047,0.01607,0,0,0,0,0,0,0,0,0,0},
    {91.96848,1.054,1.119,4.562,0.8,0.096,0.158,0.044,0.036,0.0347,0.0238,0.0127,0.00336,0.00096,0.046,0.001,0,0,0,0.035,0.005},
    {91.702,0.122,2.185,3.325,1.385,0.298,0.38,0.147,0.109,0.347,0,0,0,0,0,0,0,0,0,0,0},
    {91.5724,5.508,1.085,1.614,0.1283,0.0232,0.0175,0.0082,0.0048,0.0018,0.0008,0.0009,0.0001,0,0,0,0,0,0,0.035,0},
    {91.438166,0.163873,0.675596,4.956436,1.599984,0.360954,0.350597,0.136459,0.100087,0.217849,0,0,0,0,0,0,0,0,0,0,0},
    {91.34,0.85,2.05,4.87,0.62,0.08,0.11,0.04,0.03,0.01,0,0,0,0,0,0,0,0,0,0,0},
    {91.156,0.337,0.742,5.223,1.806,0.278,0.313,0.07,0.045,0.018,0.009,0.003,0,0,0,0,0,0,0,0,0},
    {91.0481,7.8453,0.0847,0.6367,0.1497,0.0575,0.057,0.032,0.0216,0.0337,0.0337,0,0,0,0,0,0,0,0,0,0},
    {91.003,0.296,0.515,4.616,2.009,0.447,0.56,0.179,0.135,0.115,0.084,0.041,0,0,0,0,0,0,0,0,0},
    {90.81921,7.12831,0.87065,0.88296,0.07926,0.01707,0.01635,0.00765,0.00503,0.04098,0,0,0,0,0,0,0,0,0,0.13253,0},
    {90.778696,0.218559,1.082231,4.081287,2.204731,0.691659,0.523352,0.193033,0.100592,0.125861,0,0,0,0,0,0,0,0,0,0,0},
    {90.7072,0.2818,0.5716,4.0796,2.2932,0.4856,0.8144,0.2499,0.2119,0.3048,0,0,0,0,0,0,0,0,0,0,0},
    {90.601,0.555,1.186,3.985,1.798,0.53,0.498,0.221,0.145,0.481,0,0,0,0,0,0,0,0,0,0,0},
    {90.585,0.209,1.336,4.286,1.613,0.371,0.543,0.233,0.221,0.288,0.211,0.104,0,0,0,0,0,0,0,0,0},
    {90.4054,4.1499,0.6147,3.7884,0.7247,0.0777,0.118,0.0284,0.0259,0.0257,0.0084,0.0024,0.0005,0,0.0001,0.0268,0,0.003,0,0,0},
    {90.389101,2.175303,0.319142,4.256873,1.716217,0.167522,0.416726,0.104049,0.136972,0.090131,0.09575,0.085796,0.040432,0.004163,0,0.001822,0,0,0,0,0},
    {90.195993,0.196547,0.607043,5.56051,1.926996,0.441314,0.446464,0.166889,0.126551,0.137885,0.116008,0.06971,0.00809,0,0,0,0,0,0,0,0},
    {90.076537,0.212278,1.15296,4.309807,2.350053,0.757585,0.573712,0.224241,0.119511,0.223316,0,0,0,0,0,0,0,0,0,0,0},
    {89.973843,1.702552,0.698605,4.444986,1.04861,0.164982,0.414362,0.211575,0.29689,0.418376,0.484131,0.109091,0.025649,0.00231,0,0.004038,0,0,0,0,0},
    {89.7879,6.935,2.815,0.3716,0.0114,0.0006,0.0014,0.0001,0,0,0,0,0,0,0,0,0,0,0,0.077,0},
    {89.741,0.15,0.962,4.754,2.37,0.568,0.683,0.275,0.185,0.312,0,0,0,0,0,0,0,0,0,0,0},
    {89.7,1,1,5,1.5,0.5,0.5,0.35,0.25,0.1,0.1,0,0,0,0,0,0,0,0,0,0},
    {89.6437,0.4283,2.1759,4.0698,1.7465,0.5081,0.4588,0.1691,0.0885,0.35565,0.35565,0,0,0,0,0,0,0,0,0,0},
    {89.581465,0.209144,1.261752,5.455874,2.2016,0.603999,0.457865,0.0736,0.0551,0.0996,0,0,0,0,0,0,0,0,0,0,0},
    {89.573,0.101,2.333,5.225,1.478,0.301,0.228,0.132,0.058,0.571,0,0,0,0,0,0,0,0,0,0,0},
    {89.46039,5.01537,0.0497,2.96667,1.10882,0.17962,0.3367,0.09144,0.08423,0.09412,0,0,0,0,0,0,0,0,0,0.61294,0},
    {89.3266,0.152,0.3279,5.6208,2.5886,0.4661,0.7645,0.2356,0.1961,0.3218,0,0,0,0,0,0,0,0,0,0,0},
    {89.2923,0.1072,4.0183,3.9297,1.1935,0.3476,0.3044,0.1632,0.0953,0.27425,0.27425,0,0,0,0,0,0,0,0,0,0},
    {89.166,0.295,1.348,4.897,2.292,0.478,0.689,0.231,0.191,0.197,0.145,0.071,0,0,0,0,0,0,0,0,0},
    {89.12266,8.44852,0.86181,1.16145,0.10696,0.03044,0.01913,0.00866,0.0036,0.05588,0,0,0,0,0,0,0,0,0,0.18089,0},
    {88.80292,0.600283,9.698425,0.864011,0.033097,0,0,0,0,0,0,0,0,0,0,0.001264,0,0,0,0,0},
    {88.5275,0.0821,0.6722,6.5923,2.4754,0.5148,0.6513,0.1408,0.097,0.1368,0.0785,0.0184,0.0129,0,0,0,0,0,0,0,0},
    {88.479,0.247,0.212,4.657,3.426,0.571,1.303,0.343,0.345,0.199,0.146,0.072,0,0,0,0,0,0,0,0,0},
    {88.404,0.216,0.984,5.976,2.605,0.42,0.607,0.161,0.129,0.498,0,0,0,0,0,0,0,0,0,0,0},
    {88.3889,2.086,1.803,4.9413,1.7055,0.3086,0.4677,0.1209,0.1111,0.0232,0.0041,0.0017,0,0,0,0,0,0,0,0.038,0},
    {88.2203,0.0504,7.5601,3.2634,0.473,0.1329,0.0777,0.0485,0.0258,0.1479,0,0,0,0,0,0,0,0,0,0,0},
    {88.1024,9.615,0.724,1.4254,0.0588,0.0134,0.01,0.004,0.003,0.0015,0.0008,0.0004,0.0002,0.0001,0,0,0,0,0,0.041,0},
    {88.06,0.166,2.112,4.911,2.629,0.54,0.746,0.263,0.195,0.378,0,0,0,0,0,0,0,0,0,0,0},
    {88.0501,3.557,0.146,4.739,1.956,0.279,0.557,0.156,0.165,0.128,0.065,0.027,0.0023,0.0006,0.032,0,0,0,0,0.122,0.018},
    {87.8114,0.693608,0,9.159537,1.857564,0.1876,0.23005,0.02308,0.018705,0.004554,0.001116,0.000129,0,0,0,0.00015,0,0,0,0,0.012506},
    {87.7585,0.4479,0.0067,8.5377,2.3391,0.3931,0.3418,0.092,0.0421,0.02055,0.02055,0,0,0,0,0,0,0,0,0,0},
    {87.744,0.414,1.207,5.54,2.398,0.725,0.72,0.375,0.228,0.649,0,0,0,0,0,0,0,0,0,0,0},
    {87.57247,0.21764,1.88718,6.81648,2.06788,0.3665,0.47401,0.15509,0.10979,0.32645,0,0,0,0,0,0,0,0,0,0.00651,0},
    {87.47047,0.948391,0.670202,6.633493,2.596537,0.299792,0.636925,0.17724,0.159765,0.145009,0.147976,0.097974,0.014799,0.000905,0,0.000522,0,0,0,0,0},
    {87.37838,0.20143,1.54039,7.6701,2.01135,0.3055,0.32428,0.10187,0.06964,0.39059,0,0,0,0,0,0,0,0,0,0.00647,0},
    {87.24227,1.84185,0.14129,5.71159,2.90147,0.71461,0.83363,0.27219,0.19623,0.1166,0,0,0,0,0,0,0,0,0,0.02827,0},
    {87.1484,9.31528,0.17051,1.56491,0.82581,0.16698,0.22774,0.07244,0.04924,0.0546,0,0,0,0,0,0,0,0,0,0.40409,0},
    {87.0964,0.0603,4.7921,5.7486,1.2839,0.3165,0.2351,0.1276,0.0723,0.2672,0,0,0,0,0,0,0,0,0,0,0},
    {87.0604,0.4203,0.4686,7.6632,2.5745,0.4268,0.5982,0.2034,0.1299,0.4545,0,0,0,0,0,0,0,0,0.0002,0,0},
    {87.0151,10.994,0.467,1.3691,0.069,0.0139,0.0109,0.0047,0.0032,0.0014,0.0009,0.0003,0.0004,0.0001,0,0,0,0,0,0.05,0},
    {86.9808,5.4976,0.0012,5.0545,1.4683,0.2955,0.3367,0.1465,0.0426,0.0816,0.0173,0.005,0.0023,0,0.0001,0.065,0,0.005,0,0,0},
    {86.945,0.131,1.994,6.402,2.19,0.486,0.558,0.31,0.189,0.795,0,0,0,0,0,0,0,0,0,0,0},
    {86.8952,9.33596,1.7281,1.64516,0.09214,0.03923,0.0264,0.00875,0.00485,0.01996,0,0,0,0,0,0,0,0,0,0.20425,0},
    {86.8614,0.3004,0.7936,6.9925,2.8641,0.6977,0.6889,0.2534,0.1889,0.3591,0,0,0,0,0,0,0,0,0,0,0},
    {86.19646,0.55988,0.8122,7.32335,3.3262,0.56283,1.0227,0.09899,0.0581,0.01973,0,0,0,0,0,0,0,0,0,0.01956,0},
    {85.11,0.322,2.537,5.771,3.022,1.007,0.92,0.482,0.29,0.539,0,0,0,0,0,0,0,0,0,0,0},
    {85.10946,0.49356,0,9.71687,3.52962,0.34733,0.60476,0.08049,0.06974,0.02904,0,0,0,0,0,0,0,0,0,0.01913,0},
    {84.8128,0.409,2.1109,10.6707,1.7673,0.08,0.1258,0.0115,0.01,0.002,0,0,0,0,0,0,0,0,0,0,0},
    {84.339,0.164,1.822,7.799,2.884,0.718,0.768,0.292,0.196,1.018,0,0,0,0,0,0,0,0,0,0,0},
    {84.3186,12.663,0.684,1.9567,0.2196,0.036,0.0375,0.0094,0.0086,0.0029,0.0021,0.001,0.0005,0.0001,0,0,0,0,0,0.06,0},
    {84.2749,3.0264,0.0642,7.1697,3.2646,0.3387,0.9764,0.1976,0.2479,0.1256,0.1303,0.1158,0.0202,0,0,0.0003,0,0,0,0.0474,0},
    {83.628,0.208,15.233,0.765,0.148,0.009,0.009,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {83.58133,4.23534,0,7.52796,3.27016,0.27318,0.60219,0.06742,0.05495,0.02031,0,0,0,0,0,0,0,0,0,0.36716,0},
    {83.483,3.266,0,9.906,2.955,0.208,0.162,0.01,0.004,0.004,0.001,0.001,0,0,0,0,0,0,0,0,0},
    {83.29,0,7.89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.82,0,0},
    {83.26911,0.60063,0.868,9.26637,5.03144,0.53156,0.39038,0.01883,0.01302,0,0,0,0,0,0,0,0,0,0,0.01066,0},
    {83.1,6.4,0,8.7,1.2,0.1,0.2,0.1,0.1,0.1,0,0,0,0,0,0,0,0,0,0,0},
    {82.75,0.25,4,2.5,0.25,0.05,0.05,0.05,0.05,0.05,0,0,0,0,0,0,0,0,10,0,0},
    {82.71012,1.690648,0.074913,6.838511,3.787402,0.566305,1.455215,0.441801,0.604675,0.448334,0.651589,0.499925,0.196589,0.033125,0,0.000849,0,0,0,0,0},
    {82.4255,0.3344,3.4692,5.148,3.32,2.5356,1.1595,0.6124,0.3544,0.3205,0.3205,0,0,0,0,0,0,0,0,0,0},
    {82.315035,10.246063,1.476152,4.436326,1.004784,0.138222,0.176057,0.044695,0.036874,0.029867,0.036616,0.009333,0.001639,0.000612,0.0003,0.001068,0,0,0,0.041437,0.004919},
    {82.22839,0.4398,1.39064,10.5382,4.90575,0.19811,0.25262,0.02142,0.01543,0,0,0,0,0,0,0,0,0,0,0.00964,0},
    {81.998043,6.073341,0.30695,5.838525,3.737102,0.394363,0.54481,0.230385,0.369107,0.149374,0.050218,0.011072,0.000121,0,0,0.001272,0,0,0,0.295317,0},
    {81.95156,1.60528,1.32751,9.04654,4.16965,0.53414,0.95291,0.16312,0.14319,0.08159,0,0,0,0,0,0,0,0,0,0.02451,0},
    {81.6967,7.3856,0.009,6.7207,2.7017,0.2636,0.5704,0.1114,0.1179,0.0325,0.0094,0.0022,0.0005,0,0.0245,0.0192,0,0.012,0.001,0.3217,0},
    {81.3,0.219,16.117,1.609,0.278,0.039,0.059,0.031,0.028,0.32,0,0,0,0,0,0,0,0,0,0,0},
    {81.078,0.416,0.207,8.01,6.928,0.784,1.719,0.293,0.308,0.123,0.09,0.044,0,0,0,0,0,0,0,0,0},
    {81,0,1.03,7.44,5.72,1.06,1.64,0.49,0.39,0.55,0.5,0.14,0.03,0.01,0,0,0,0,0,0,0},
    {80.946949,3.378699,0.141227,6.791011,3.988482,0.59416,1.566385,0.479023,0.645727,0.732772,0.548692,0.171329,0.014957,0.000425,0,0.000162,0,0,0,0,0},
    {80.58289,0.44598,1.02247,12.00581,5.22714,0.23518,0.38233,0.04489,0.03336,0.01274,0,0,0,0,0,0,0,0,0,0.00721,0},
    {80.21816,1.46108,0.84727,11.90565,4.85869,0.30351,0.3354,0.01813,0.00979,0,0,0,0,0,0,0,0,0,0,0.04232,0},
    {79.881,0.195,0.16,7.872,6.895,0.884,2.378,0.551,0.581,0.421,0.117,0.052,0.013,0,0,0,0,0,0,0,0},
    {79.8501,0.632,0.569,10.3779,4.576,0.545,1.567,0.356,0.584,0.943,0,0,0,0,0,0,0,0,0,0,0},
    {79.848,0.545,0.926,9.003,6.203,1.306,1.525,0.362,0.201,0.05427,0.02349,0.00324,0,0,0,0,0,0,0,0,0},
    {79.36567,1.163,0.114,11.677,4.988,0.447,1.197,0.263,0.252,0.153,0.0876,0.0385,0.00542,0.00081,0.174,0,0,0,0,0.071,0.003},
    {77.97,0.371,0.242,10.097,7.376,0.905,2.02,0.328,0.345,0.199,0.067,0.08,0,0,0,0,0,0,0,0,0},
    {77.961,0.64,0.385,8.608,7.721,0.947,2.479,0.453,0.455,0.168,0.123,0.06,0,0,0,0,0,0,0,0,0},
    {77.999778,0.552942,0.895427,12.02321,4.511631,0.43559,1.50226,0.282258,0.474022,0.371922,0.378585,0.354861,0.192679,0.024835,0,0,0,0,0,0,0},
    {77.58612,1.52306,0,15.3834,4.69307,0.32929,0.39609,0.03631,0.02028,0,0,0,0,0,0,0,0,0,0,0.03238,0},
    {77.411,0.447,0.098,15.508,4.967,0.415,0.859,0.101,0.103,0.027,0.004,0,0,0,0.035,0.004,0,0,0,0.021,0},
    {77.2797,5.0894,0.0001,14.9209,2.1267,0.2492,0.2681,0.0355,0.0246,0.003886,0.001682,0.000232,0,0,0,0,0,0,0,0,0},
    {77.1203,0.5364,0.1685,12.5944,6.342,0.8574,1.5559,0.3129,0.2879,0.2243,0,0,0,0,0,0,0,0,0,0,0},
    {76.255,22.065,0.58,0.9625,0.0299,0.0077,0.0041,0.0022,0.0015,0.0006,0.0004,0,0.0001,0,0,0,0,0,0,0.091,0},
    {75.769,0.33,0.457,10.648,7.942,1.073,2.545,0.508,0.496,0.143,0.06,0.029,0,0,0,0,0,0,0,0,0},
    {75.554281,5.769795,0.20124,8.164206,5.027471,0.821108,2.345239,0.677005,0.922851,0.381812,0.117568,0.015599,0.000561,0,0,0.001264,0,0,0,0,0},
    {75.45,0,11.28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.27,0,0},
    {75.1,3.4,0,17.3,2.7,0.3,0.6,0.2,0.2,0.2,0,0,0,0,0,0,0,0,0,0,0},
    {74.7042,0.8729,1.5901,6.0731,8.1212,5.0359,2.4555,0.6363,0.3099,0.10045,0.10045,0,0,0,0,0,0,0,0,0,0},
    {73.72889,2.83044,0.96973,21.97829,0.29266,0.03822,0.06787,0.01452,0.01352,0.00332,0,0,0,0,0,0,0,0,0,0.06254,0},
    {73.6505,0.8567,1.7302,13.995,6.7047,1.4275,1.2579,0.2356,0.1104,0.0315,0,0,0,0,0,0,0,0,0,0,0},
    {71.38541,3.14628,0.95362,24.26673,0.15307,0.00776,0.01522,0.00145,0.0017,0,0,0,0,0,0,0,0,0,0,0.06876,0},
    {69.56109,8.54918,1.04002,16.86119,3.04172,0.12064,0.25717,0.02072,0.01624,0,0,0,0,0,0,0,0,0,0,0.53203,0},
    {68.365571,2.301598,0.349596,10.458479,8.988222,1.175538,3.242343,0.896405,1.340342,1.100411,1.27877,0.421622,0.069836,0.007742,0,0.003525,0,0,0,0,0},
    {67.441167,0.442886,1.901399,22.471043,6.461846,0.288192,0.803343,0.071433,0.083677,0.026594,0.006686,0.000894,0.000031,0,0,0.000809,0,0,0,0,0},
    {67.14,0.04,29.04,3.13,0.57,0.06,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {66.100492,9.920358,0.5784,12.809981,6.59326,0.756312,1.829677,0.371826,0.456861,0.27078,0.200677,0.090216,0.018772,0.001171,0,0.001218,0,0,0,0,0},
    {66.01,0.27,2.48,10.24,4.79,0.55,1.27,0.2,0.27,0.14,0.06,0.01,0,0,0,0,0,0,13.7,0.01,0},
    {65.275,16.816,17.83,0.079,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {63.155785,1.284518,9.305238,6.509759,7.122961,1.563064,4.296421,1.334616,2.929742,1.56106,0.619214,0.157308,0.06613,0.094185,0,0,0,0,0,0,0},
    {62.36,0.24,4.54,5.97,2.94,0.57,1.21,0.53,0.74,1.12,0.81,0.27,0.01,0,0.01,0,0,0,18.67,0.01,0},
    {62.232,0.41,0.347,18.174,13.439,1.46,3.206,0.351,0.317,0.041,0.019,0.004,0,0,0,0,0,0,0,0,0},
    {62.225,0.575,0.266,18.446,14.098,1.247,2.585,0.262,0.227,0.033,0.024,0.012,0,0,0,0,0,0,0,0,0},
    {61.836,32.92,0.04,2.585,1.227,0.149,0.291,0.062,0.053,0.072,0,0,0,0,0,0.044,0,0,0,0.721,0},
    {56.255,1.529,4.172,14.462,8.19,1.155,3.965,0.945,1.191,0.558,0,0,0,0,0,0,0,0,7.578,0,0},
    {48.253,2.587,6.142,19.773,13.015,1.736,4.006,0.976,0.922,1.19,0,0,0,0,0,0,0,0,1.4,0,0},
    {47.626349,45.560329,0.069854,2.816443,2.041189,0.325189,0.793324,0.177154,0.227927,0.093194,0.101909,0.10147,0.057024,0.007773,0,0.000871,0,0,0,0,0},
    {45.473,3.505,9.498,14.676,13.749,1.933,5.164,1.507,1.307,0.738,0,0,0,0,0,0,0,0,2.45,0,0},
    {32.8042,1.3411,6.8507,21.422,17.7536,2.3134,5.9043,1.3381,1.3033,1.6911,0,0,0,0,0,0,0,0,7.2782,0,0},
    {32.095,0.39,3.34,21.24,22.535,2.763,8.415,2.217,3.101,3.895,0,0,0,0,0,0,0,0,0,0.009,0},
    {31.3359,0.4148,67.6289,0.36,0.1439,0.0156,0.0399,0.0105,0.0131,0.0176,0.0131,0.0064,0.0003,0,0,0,0,0,0,0,0},
    {24.771,64.615,1.149,1.835,1.415,0.323,0.767,0.285,0.353,0.718,0,0,0,0,0,0.283,0,0,0,3.486,0},
    {21.2401,7.74,64.5369,0.512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.09,0.629,0.252},
    {20,1.99,29.458,7.97,19.9,2.1,2.1,1.04,1.03,0.312,0,0,0,0,0,0,0,0,14,0,0.1},
    {18.330586,79.049225,0.135005,0.380462,0.043199,0,0.000473,0.000223,0,0,0,0,0,0,0,2.060827,0,0,0,0,0},
    {17.853193,29.009483,0.502491,12.351052,20.500845,3.688749,9.577971,2.121356,2.221701,0.854673,0.410747,0.091845,0.004282,0.000093,0,0.811519,0,0,0,0,0},
    {9.488,1.647,86.536,1.734,0.401,0.029,0.093,0.014,0.02,0.018,0,0,0,0,0,0,0,0,0.02,0,0},
    {9.15799,0.41788,87.913605,1.336899,0.673546,0.04486,0.197206,0.048737,0.06558,0.054068,0.063497,0.015834,0.006521,0.001611,0,0.002167,0,0,0,0,0},
    {1.113,0,19.185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79.702,0,0},
    {0.96,0.92,45.32,0.96,0.61,0.49,0.48,0.07,0.19,0.04,0,0,0,0,0,0,0,0,49.96,0,0},
    {100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};

const std::vector<G08El> validation_data = {
    { 2,190.68,11.0,4.62270367011,45.4451259446,7883.3949099,229.601025004 },
    { 3,190.5,11.0,4.61746427515,45.5151912828,7771.78810714,229.085523569 },
    { 4,190.83,11.0,4.64516211814,45.2658426433,4905.55490022,230.317348488 },
    { 5,190.65,11.0,4.64297558383,45.1856923279,4744.40155422,230.704421197 },
    { 6,130.8,1.0,0.816531614503,46.940490349,97.8401467136,248.612998885 },
    { 9,191.68,12.0,4.62468477409,42.0537079316,1946.67809823,241.885646942 },
    { 10,190.3,11.0,4.6663056297,44.914958222,2902.964215,231.36172711 },
    { 12,230.6,5.0,6.58054561299,29.2228095011,65.3720465645,346.404609362 },
    { 13,194.05,10.0,4.8619048335,45.0799761925,1481.30706334,236.03859612 },
    { 14,193.15,10.0,4.7971453615,46.0796923329,1867.29001195,231.348043201 },
    { 15,193.11,10.0,4.91403161515,43.6894498673,1077.65187345,241.347857919 },
    { 17,196.2,10.0,5.08916825631,42.4239390997,790.091839087,247.905572913 },
    { 18,225.89,8.0,7.86175274559,32.1986731579,112.23566486,330.504863964 },
    { 19,247.99,6.0,8.41095710807,30.2380337316,68.3464658457,362.008654969 },
    { 20,222.02,7.0,7.09598653117,31.782452571,105.248324057,321.164128485 },
    { 21,213.06,6.0,5.8900296652,32.1306740606,108.971527681,300.33738017 },
    { 22,199.01,9.0,5.22647829222,41.103244467,568.646792395,251.766405114 },
    { 23,201.28,9.0,5.37982847365,39.9620298817,450.937490798,259.788742619 },
    { 24,196.37,10.0,5.19157888165,41.2818157085,636.277497057,252.810869976 },
    { 25,231.86,7.0,7.83733139315,31.4783001914,92.2051822127,334.746641412 },
    { 26,196.85,10.0,5.22148503243,41.1025787658,609.024627195,253.98705191 },
    { 27,246.54,3.5,5.66177517777,28.5056264506,50.801413577,366.055831605 },
    { 28,196.02,10.0,4.94240303924,45.6848657651,1221.88921461,231.212226699 },
    { 29,234.05,6.0,7.40322191186,30.5415601377,77.5671754472,338.155827887 },
    { 30,221.05,6.0,6.45415409646,31.3430191493,93.315236451,313.627351501 },
    { 31,255.57,7.0,9.97926759849,30.56156681,70.7440829023,377.977990114 },
    { 32,211.52,8.0,6.11581362063,35.6247051707,200.408967133,286.770323857 },
    { 33,181.16,18.0,3.18204781896,31.6700403854,97.2159372943,549.617923002 },
    { 34,242.44,11.0,12.9095560514,30.4240098053,82.4863204228,431.951122477 },
    { 35,196.14,10.0,4.99882564087,44.5409462682,960.424608357,236.275664671 },
    { 36,273.35,10.0,15.6545907684,31.639830008,70.5051265019,454.724468103 },
    { 37,234.59,6.0,7.61364436363,29.9654328183,73.3329902401,345.688950086 },
    { 38,241.69,8.0,9.35481494409,31.7127286702,89.7485809812,357.613524565 },
    { 39,236.5,8.0,8.75849157855,32.1463991117,97.7521265976,344.453796488 },
    { 40,231.01,8.0,8.18423596668,32.4330998871,107.552637682,333.365652348 },
    { 41,236.97,7.0,8.23061398495,31.3624849451,87.2482019715,340.192922049 },
    { 42,201.46,9.0,5.47266203231,39.1998335928,393.758164264,262.64872431 },
    { 43,226.13,7.0,7.23313132978,32.2418314792,105.203129887,318.958847984 },
    { 44,247.1,6.0,8.33411935702,30.2114128073,68.9618723857,358.351699507 },
    { 45,232.94,8.0,8.30415554865,32.5671616693,105.800327699,335.993914233 },
    { 46,227.22,7.0,7.50324389677,31.6835795586,97.0429632513,326.998331734 },
    { 47,231.03,7.0,7.60758922075,32.1036356548,97.9455334285,326.487573118 },
    { 49,170.47,19.0,2.77384777303,30.756485902,87.041515141,599.937363291 },
    { 50,207.24,9.0,5.84820929949,37.8277545916,296.942776559,273.730227574 },
    { 51,261.45,8.0,11.3436891099,31.6611908223,75.0970172748,389.32509397 },
    { 52,238.57,2.0,3.39777306021,27.615808921,43.4631657762,357.530699336 },
    { 53,237.06,8.0,8.75101482894,32.2698258184,98.4709237108,343.392863743 },
    { 54,237.02,8.0,8.66778109895,32.453650345,100.393192163,341.920465102 },
    { 55,238.06,8.0,8.76031434399,32.4530923518,99.2203049076,341.536457882 },
    { 56,242.68,8.0,9.30124541534,32.0536020178,91.789682505,351.034557936 },
    { 57,223.8,7.0,7.00953554963,32.6072486709,111.007622635,313.27999208 },
    { 58,202.47,9.0,5.71915100585,37.5900469278,309.348011177,269.875078353 },
    { 59,261.72,9.0,12.1292810299,32.8015013361,81.0171183867,397.921231366 },
    { 60,259.34,9.0,12.237590247,31.7676325747,78.3618191292,402.068996966 },
    { 61,258.26,8.0,10.891394584,31.861415713,78.32824206,381.712054461 },
    { 62,270.55,9.0,13.538516296,31.9382536625,73.1012246759,418.603814715 },
    { 63,233.28,8.0,8.28604231415,32.650856773,107.16353144,330.746284279 },
    { 64,246.46,8.0,9.45352634679,32.7176539319,91.6751582623,353.648260877 },
    { 65,238.64,7.0,9.09762160388,29.4803232957,72.2479993202,362.116587241 },
    { 66,246.79,9.0,10.238785593,32.924812429,95.200693943,366.380555381 },
    { 67,212.89,8.0,6.26949122568,35.3548810196,185.166017215,287.488222533 },
    { 68,204.46,10.0,5.62077028367,39.865962246,392.736260379,263.716759856 },
    { 69,230.28,8.0,7.77072719526,33.5936252164,119.889993904,321.492875878 },
    { 70,257.13,9.0,11.4030030108,33.0825663167,86.1156991851,385.326354275 },
    { 71,233.84,8.0,8.42776381739,32.6465466941,103.047719554,335.561625352 },
    { 72,230.75,8.0,7.71655059351,33.9265358788,121.992584935,319.511432491 },
    { 73,252.78,6.0,8.59046840657,30.7419943263,68.7381871461,360.324854111 },
    { 74,246.36,8.0,9.45805643807,32.5907431701,91.7009234444,351.129014303 },
    { 76,240.87,8.0,8.76330453951,33.1732520223,101.36027497,340.10291148 },
    { 77,212.68,8.0,6.12995336715,36.0816525275,201.926945138,281.059176853 },
    { 78,227.56,8.0,7.38691723508,34.2809431308,131.913749557,311.666792124 },
    { 79,231.93,6.0,7.76277074981,29.1238121393,68.6450483976,347.400436959 },
    { 80,255.83,8.0,10.2653604751,32.9577115673,85.2644386911,365.991066619 },
    { 81,209.74,6.0,6.08973069491,30.7258454944,94.3516644609,304.52964904 },
    { 82,242.46,8.0,8.77950585052,33.5928118854,102.259020255,337.384402389 },
    { 83,246.66,9.0,9.85052469167,33.8551588583,101.21119028,357.409357652 },
    { 84,248.38,9.0,10.2241838576,33.4018863878,96.4457739305,363.331727547 },
    { 85,265.89,9.0,12.3921187705,33.217492979,80.9090739965,396.947957401 },
    { 87,264.02,9.0,12.7036564403,32.1710600142,76.731901663,406.019919568 },
    { 88,264.23,8.0,11.0824330058,33.0370344112,80.0101892606,378.482675777 },
    { 89,249.38,8.0,9.39142552101,33.6500343743,95.1008837745,346.992315346 },
    { 90,283.26,9.0,14.7992125107,33.255922569,71.1106660163,430.046107672 },
    { 91,190.6,11.0,5.02463332845,41.996918555,593.361408615,241.453850824 },
    { 92,246.87,9.0,9.73818062937,34.1416951875,103.376211234,353.669374085 },
    { 93,251.94,8.0,9.83191285185,33.1153456235,89.3111068954,356.290213018 },
    { 94,262.02,9.0,11.8517619025,33.3274021219,84.2096198186,386.009374638 },
    { 95,238.1,8.0,8.23273432916,34.1175127144,112.591123082,325.525123479 },
    { 96,254.46,8.0,10.064139923,33.0040639842,87.5233777336,358.402488324 },
    { 97,186.4,17.0,5.04833870664,31.9105995386,98.1181880374,518.60922022 },
    { 98,247.94,9.0,9.76227826876,34.3693143337,103.541465467,354.495741403 },
    { 99,253.61,9.0,10.9174043368,32.9833208652,90.23919527,369.687791845 },
    { 100,258.58,9.0,11.2335200316,33.7756229208,89.0922749531,377.139569914 },
    { 101,207.63,7.0,6.41425622373,31.6602809277,116.411274674,299.01766929 },
    { 102,203.03,10.0,5.39068762355,43.3983182562,557.00704534,237.529516591 },
    { 103,257.36,8.0,10.0646842666,33.8602490725,89.3828572907,358.090266488 },
    { 104,265.65,9.0,11.6827824024,34.9119885774,88.1612603561,382.093439703 },
    { 105,250.86,9.0,10.0837978671,34.3425117357,100.224212896,357.901302852 },
    { 106,231.97,8.0,7.89448862723,33.7913350643,117.122917741,318.256796948 },
    { 107,230.07,7.0,7.27715826734,33.0390810593,109.337214095,304.866741453 },
    { 109,250.27,9.0,9.97133706727,34.4587392885,101.806187558,353.381524146 },
    { 110,254.92,8.0,10.4901035642,32.4125141009,81.5599108086,368.572177752 },
    { 111,224.33,9.0,7.02599693886,36.3734399912,173.460975175,300.623292839 },
    { 112,236.25,8.0,7.83116332192,34.9613804227,123.224247533,317.472618577 },
    { 113,259.85,9.0,11.0444438772,34.6038683657,92.3083026167,371.112319966 },
    { 114,250.2,8.0,9.31295428194,33.9879367689,97.3805421901,342.545944156 },
    { 115,262.0,9.0,11.5826755,33.9513569985,87.0030001035,382.16902755 },
    { 116,250.16,8.0,9.30208970798,33.9845960702,97.5436893482,343.0853598 },
    { 117,244.73,9.0,9.41062776308,34.5835338586,107.451797521,346.317273065 },
    { 118,217.39,8.0,7.68814687039,31.5072524171,107.753257685,319.698576419 },
    { 119,241.39,8.0,8.55984724345,33.8163788663,107.582608578,325.467201647 },
    { 120,250.67,9.0,9.88829158121,34.7540978658,103.204374199,354.132003199 },
    { 123,260.51,9.0,11.0704708266,34.6119399597,92.488931266,369.853687611 },
    { 124,193.87,10.0,5.5164309055,38.4084389799,348.32829958,259.265403571 },
    { 125,251.57,9.0,9.88657642886,35.0209798543,103.812041846,352.55450895 },
    { 126,240.5,9.0,8.52763155273,35.6856392575,124.853882476,327.470034612 },
    { 127,262.33,9.0,10.9244361035,35.5644329631,95.4749721845,362.848796116 },
    { 128,238.91,9.0,8.18873272315,36.2175530089,133.330813522,321.432766598 },
    { 129,225.2,9.0,6.83994236212,37.4596116376,188.588898926,289.951007446 },
    { 130,268.85,9.0,11.5925656297,35.8330503479,91.3047230915,373.144623421 },
    { 132,266.55,9.0,12.0369503718,34.4967848717,84.8900132112,385.085115401 },
    { 133,210.96,10.0,5.90739329681,41.4597156023,372.254770376,244.512338754 },
    { 134,235.18,9.0,8.52878642711,34.6954872135,119.615641817,328.307597543 },
    { 135,229.06,9.0,7.5140295957,36.0972999074,149.297275562,307.359128171 },
    { 136,226.11,9.0,7.27364565958,34.5676454521,184.449674906,288.945310537 },
    { 137,241.02,9.0,8.19176501205,36.8513015751,134.541535309,317.105346144 },
    { 138,231.81,8.0,8.04517729342,33.5542392643,111.458050195,320.547852421 },
    { 139,233.1,9.0,7.82790324222,34.0662646041,155.807755896,305.082547493 },
    { 140,316.17,9.0,17.3334211335,39.2195064272,74.3816254092,440.129200554 },
    { 141,276.5,9.0,12.0884841896,37.2359159472,90.6649126465,372.319311105 },
    { 142,234.18,8.0,9.08170708489,31.3420922259,89.0954860843,339.919163572 },
    { 143,238.99,9.0,7.87151425572,37.2948870588,144.206748973,309.302082618 },
    { 144,252.44,9.0,10.7176513835,33.9197547019,91.54111138,363.217788956 },
    { 145,248.37,9.0,9.10784037388,36.2759907734,116.060814975,332.670989384 },
    { 146,266.6,11.0,16.1903284162,32.3372854558,73.0790755829,458.314146445 },
    { 147,236.88,8.0,8.12712284814,33.8607879483,119.072995232,298.444102989 },
    { 148,268.82,9.0,10.764572463,38.0268220872,100.884009866,356.624016449 },
    { 149,292.78,9.0,13.6104830364,39.1286934828,86.1079257312,393.037173526 },
    { 150,285.26,10.0,14.9460472976,37.5605850558,82.3486470927,423.534881035 },
    { 151,243.7,9.0,8.15112070576,37.643279493,137.700524199,313.634683613 },
    { 152,241.6,9.0,8.11015138579,37.3028366829,137.112508665,313.348100291 },
    { 153,282.26,9.0,11.982782144,39.4550807536,94.7482549712,371.328834117 },
    { 154,277.36,9.0,11.7789232371,38.1251945967,94.1318860748,370.668263038 },
    { 155,263.44,9.0,10.0412378515,38.1373315424,108.108750703,343.612519562 },
    { 156,271.38,8.0,10.4329685026,37.0094527178,93.5625015556,350.065218057 },
    { 157,274.98,9.0,10.9880076324,39.3513597496,101.606635249,356.055640094 },
    { 158,278.69,9.0,11.3870508883,39.7125305262,99.0284581842,360.720155115 },
    { 159,302.25,9.0,14.7947901938,39.4250461962,82.3114961797,406.771005698 },
    { 160,241.44,10.0,8.15220195415,38.212892703,144.510885805,321.286149934 },
    { 161,252.44,9.0,8.66976027666,38.4146476305,128.448451009,321.860804089 },
    { 162,234.5,9.0,7.79220737002,36.6616090976,141.458313202,308.505453731 },
    { 163,266.92,9.0,10.0670811805,39.0095179884,109.656609812,342.868883517 },
    { 165,270.5,10.0,10.8113759956,40.4400323578,109.086346908,363.549698422 },
    { 166,272.86,10.0,12.7291480031,38.0187708768,91.7953390826,391.09934158 },
    { 167,241.31,10.0,8.68109917043,34.0334463172,154.053528285,307.556427573 },
    { 168,251.57,9.0,9.04636788041,37.2611727547,118.947630681,329.251743401 },
    { 169,279.04,10.0,11.5988108076,42.0432122407,104.754607578,371.064181191 },
    { 170,231.58,10.0,7.08144168186,39.1507399174,182.997336534,295.514900796 },
    { 171,258.6,10.0,9.40330616186,39.7599018221,124.011685219,337.683858805 },
    { 172,233.24,10.0,7.08036243751,39.6032729349,182.842508006,293.937853235 },
    { 173,233.84,11.0,8.74209766117,36.4081184335,126.901796343,338.882311953 },
    { 174,310.19,10.0,15.2305393633,47.0753061878,94.3158152769,418.855629697 },
    { 175,256.95,10.0,8.42178432564,41.4264820298,144.032850503,316.58381689 },
    { 176,235.1,10.0,7.32275532405,39.7926633191,217.775362468,255.625552191 },
    { 177,274.07,10.0,12.689788628,38.6390864134,92.6566262261,382.506505033 },
    { 178,270.13,10.0,9.94380785805,38.7560507764,127.474989409,331.866622904 },
    { 179,209.29,10.0,6.9634757629,36.0947263441,182.130130219,262.418283535 },
    { 180,312.27,10.0,14.6520630866,48.6605146663,99.12252193,396.381149952 },
    { 181,303.93,10.0,13.7594443195,40.2460098847,99.0003926199,372.187226825 },
    { 182,281.88,10.0,9.91423544546,45.9003644661,123.713235736,343.374275975 },
    { 183,279.84,10.0,9.75365568702,45.5437243318,125.190814315,340.165736981 },
    { 184,215.01,10.0,10.4432902756,29.4388006779,82.9645750887,347.973036852 },
    { 185,292.77,10.0,11.037547721,45.4429261207,117.446946458,347.505909999 },
    { 186,299.33,10.0,10.7232913039,50.1402659086,120.922039815,348.892729043 },
    { 187,328.8,2.5,6.52997732457,28.9004427604,41.2456635657,391.802899563 },
    { 188,302.77,10.0,10.9593914062,50.9941968459,120.345314168,347.434252464 },
    { 189,324.72,9.0,9.5977360334,59.0054683434,144.60265504,306.753927376 },
    { 190,349.46,8.0,9.45674189307,71.732506713,152.503753711,299.294045031 },
    { 191,274.9,12.0,8.94266971098,43.9624144043,227.90004516,244.798877242 },
    { 192,308.71,4.0,9.85057517622,26.5629014571,40.4279546981,380.469340157 },
    { 193,275.94,13.0,10.1168205478,40.91404509,169.070296748,274.533510953 },
    { 194,317.98,9.0,8.76339697904,54.6455382659,183.097969149,255.592992441 },
    { 195,143.86,10.0,4.53641557343,33.9856970778,287.657541197,198.734160276 },
    { 196,374.45,4.0,9.14695409611,62.0642856225,95.4592625121,280.34143267 },
    { 197,293.55,12.0,8.13545547114,52.266177497,433.576985698,206.046707897 },
    { 198,297.68,11.0,8.11287585377,54.1055225168,543.627296793,196.766426663 },
    { 199,357.24,11.0,9.77272264849,43.6891149152,673.95827868,247.228832437 },
    { 200,331.57,11.0,9.01349433702,47.2424214857,513.285937824,230.179140482 },
};
// In the component order of the AGA8 test code
const std::vector<std::string> components = {"methane","nitrogen","carbondioxide","ethane","propane","isobutane","n-butane","isopentane","n-pentane","n-hexane","n-heptane","n-octane","n-nonane","n-decane","hydrogen","oxygen","carbonmonoxide","water","hydrogensulfide","helium","argon"};

TEST_CASE("Validate all GERG2008 pures reference states", "[GERG20081]"){
    
    SetupGERG();
    
    auto model = GERG2008::GERG2008ResidualModel(components);
    auto modelig = GERG2008::GERG2008IdealGasModel(components);
    
    double T0_K = 298.15, p0_Pa = 101325, R = 8.314472, rho0_molm3 = p0_Pa/(T0_K*R);
    
    nlohmann::json o = nlohmann::json::array();
    for (auto i = 0U; i < components.size(); ++i){
        Eigen::ArrayXd Eigmolefracs = Eigen::ArrayXd::Zero(21); Eigmolefracs(i) = 1.0;
        auto Aig00 = modelig.alphar(T0_K, rho0_molm3, Eigmolefracs);
        auto Aig10 = TDXDerivatives<decltype(modelig)>::get_Ar10(modelig, T0_K, rho0_molm3, Eigmolefracs);
        auto Aig20 = TDXDerivatives<decltype(modelig)>::get_Ar20(modelig, T0_K, rho0_molm3, Eigmolefracs);
        auto h0 = R*T0_K*(1.0 + Aig10);
        auto s0 = R*(Aig10 - Aig00);
        CAPTURE(components[i]);
        CHECK_THAT(h0, WithinAbsMatcher(0, 1e-6));
        CHECK_THAT(s0, WithinAbsMatcher(0, 1e-6));
        
        double alphaigGERG[3];
        std::vector<double> molefracsGERG(Eigmolefracs.size()+1); molefracsGERG[i+1] = 1.0;
        Alpha0GERG(T0_K, rho0_molm3/1e3, molefracsGERG, alphaigGERG);
        
        CHECK_THAT(alphaigGERG[1], WithinAbsMatcher(Aig10, 1e-6));
        CHECK_THAT(alphaigGERG[0], WithinAbsMatcher(Aig00, 1e-6));
        auto h0_AGA = R*T0_K*(1.0 + alphaigGERG[1]);
        auto s0_AGA = R*(alphaigGERG[1] - alphaigGERG[0]);
        CHECK_THAT(h0_AGA, WithinAbsMatcher(0, 1e-4));
        CHECK_THAT(s0_AGA, WithinAbsMatcher(0, 1e-4));
        
        double P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, W, G, JT, Kappa, A;
        PropertiesGERG(T0_K, rho0_molm3/1e3, molefracsGERG, P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, W, G, JT, Kappa, A);
        double cv_calc_JmolK = -(TDXDerivatives<decltype(modelig)>::get_Ar20(modelig, T0_K, rho0_molm3, Eigmolefracs) + TDXDerivatives<decltype(model)>::get_Ar20(model, T0_K, rho0_molm3, Eigmolefracs))*R;
        CHECK_THAT(cv_calc_JmolK, WithinRel(cvGERG2008_AGA8_JmolK, 1e-9));
        
        o.push_back(nlohmann::json{
            {"name", components[i]},
            {"n_1", modelig.aig.coeffs[i].n0[1]},
            {"n_2", modelig.aig.coeffs[i].n0[2]}
        });
    }
    teqp::JSON_to_file(o, "GERG200X_integration_constants.json");
}

TEST_CASE("Validate all GERG2008 binaries", "[GERG20082]"){
    
    SetupGERG();
    
    CHECK_NOTHROW(GERG2008::GERG2008ResidualModel(components));
    auto model = GERG2008::GERG2008ResidualModel(components);
    auto modelig = GERG2008::GERG2008IdealGasModel(components);
    
    double R = 8.314472;
    
    for (auto i = 0U; i < components.size(); ++i){
        for(auto j = i+1; j < components.size(); ++j){
            
            double T_K = 300;
            double rho_molm3 = 1000;
            std::vector<double> molefracs(21, 0.0);
            molefracs[i] = 0.5;
            molefracs[j] = 0.5;
            
            auto rhocomplex = std::complex<double>(rho_molm3, 1e-100);
            double Ar01 = rho_molm3*model.alphar(T_K, rhocomplex, molefracs).imag()/1e-100;
            double p_calc_MPa = rho_molm3*R*T_K*(1.0 + Ar01)/1e6;
            
            double pbin_MPa;
            {
                auto bin = GERG2008::GERG2008ResidualModel({components[i], components[j]});
                std::vector<double> molefracs = {0.5, 0.5};
                double Ar01 = rho_molm3*bin.alphar(T_K, rhocomplex, molefracs).imag()/1e-100;
                pbin_MPa = rho_molm3*R*T_K*(1.0 + Ar01)/1e6;
            }
            
            CAPTURE(i);
            CAPTURE(j);
            CAPTURE(components[i]);
            CAPTURE(components[j]);
            
            Eigen::ArrayXd Eigmolefracs = Eigen::Map<const Eigen::ArrayXd>(&molefracs[0], molefracs.size());
            double cv_calc_JmolK = -(TDXDerivatives<decltype(modelig)>::get_Ar20(modelig, T_K, rho_molm3, Eigmolefracs) + TDXDerivatives<decltype(model)>::get_Ar20(model, T_K, rho_molm3, Eigmolefracs))*R;
            double alphaig00 = TDXDerivatives<decltype(modelig)>::get_Ar00(modelig, T_K, rho_molm3, Eigmolefracs);//modelig.alphar(T_K, rho_molm3, molefracs);
            std::complex<double> compT{T_K, 1e-100};
            double alphaig10 = -T_K*modelig.alphar(compT, rho_molm3, Eigmolefracs).imag()/1e-100;//modelig.alphar(T_K, rho_molm3, molefracs);
            
            double rho_moldm3 = rho_molm3/1000;
            double pGERG2008_AGA8 = -1, ZZ = -1;
            std::vector<double> molefracsGERG = molefracs;
            molefracsGERG.insert(molefracsGERG.begin(), 0.0); // This array uses 1-based indexing, so insert a placeholder
            PressureGERG(T_K, rho_moldm3, molefracsGERG, pGERG2008_AGA8, ZZ);
            double pGERG2008_AGA8_MPa = pGERG2008_AGA8/1000.0;
            double P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, W, G, JT, Kappa, A;
            PropertiesGERG(T_K, rho_moldm3, molefracsGERG, P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, W, G, JT, Kappa, A);
            double alphaigGERG[3];
            Alpha0GERG(T_K, rho_moldm3, molefracsGERG, alphaigGERG);
            
            CHECK_THAT(pGERG2008_AGA8_MPa, WithinRel(p_calc_MPa, 1e-9));
            CHECK_THAT(pGERG2008_AGA8_MPa, WithinRel(pbin_MPa, 1e-9));
            
//            CHECK_THAT(alphaigGERG[1], WithinRelMatcher(alphaig10, 1e-16));
            CAPTURE(cv_calc_JmolK);
            CAPTURE(cvGERG2008_AGA8_JmolK);
            CHECK_THAT(cvGERG2008_AGA8_JmolK, WithinRelMatcher(cv_calc_JmolK, 1e-9));
        }
    }
}

TEST_CASE("Validate all GERG2008 models", "[GERG2008]"){
    
    CHECK_NOTHROW(GERG2008::GERG2008ResidualModel(components));
    auto model = GERG2008::GERG2008ResidualModel(components);
    auto modelig = GERG2008::GERG2008IdealGasModel(components);
    
    SetupGERG();
    for (auto i = 0U; i < validation_data.size(); ++i){
        double p_given_MPa = validation_data[i].P_MPa;
        
        double rho = validation_data[i].D_molL*1e3;
        double T = validation_data[i].T_K;
        double R = 8.314472;
        
        auto ptr = mixture_comps[validation_data[i].GasNo-2];
        Eigen::ArrayXd molefracs = Eigen::Map<Eigen::ArrayXd>(&(ptr[0]), ptr.size())/100.0;
        CHECK(abs(molefracs.sum()-1) < 1e-7);
        
        auto rhocomplex = std::complex<double>(rho, 1e-100);
        double alphar = model.alphar(T, rho, molefracs);
        double cv_calc_JmolK = -(TDXDerivatives<decltype(modelig)>::get_Ar20(modelig, T, rho, molefracs) + TDXDerivatives<decltype(model)>::get_Ar20(model, T, rho, molefracs))*R;
        double Aig20 = TDXDerivatives<decltype(modelig)>::get_Ar20(modelig, T, rho, molefracs);
        
        double pGERG2008_AGA8 = -1, ZZ = -1;
        REQUIRE(ptr.size() == 21);
        std::vector<double> x = ptr;
        x.insert(x.begin(), 0.0);
        for (auto k = 0; k < x.size(); ++k){
            x[k] /= 100.0;
        }
        PressureGERG(T, rho/1e3, x, pGERG2008_AGA8, ZZ);
        double pGERG2008_AGA8_MPa = pGERG2008_AGA8/1000.0;
        
        double P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, wGERG2008_AGA8_ms, G, JT, Kappa, A;
        PropertiesGERG(T, rho/1e3, x, P, Z, dPdD, d2PdD2, d2PdTD, dPdT, U, H, S, cvGERG2008_AGA8_JmolK, Cp, wGERG2008_AGA8_ms, G, JT, Kappa, A);
        
        double Tr = model.red.get_Tr(molefracs);
        double rhor = model.red.get_rhor(molefracs);
        
        CAPTURE(i);
        CAPTURE(validation_data[i].GasNo);
        CAPTURE(molefracs);
        CAPTURE(Tr);
        CAPTURE(rhor);
        CAPTURE(T);
        CAPTURE(rho);
        CAPTURE(pGERG2008_AGA8);
        CAPTURE(cv_calc_JmolK);
        CAPTURE(validation_data[i].GasNo-2);
        CHECK(std::isfinite(alphar));
        
        double Ar01 = rho*model.alphar(T, rhocomplex, molefracs).imag()/1e-100;
        double p_calc_MPa = rho*R*T*(1.0 + Ar01)/1e6;
        
        using tdx = TDXDerivatives<decltype(model)>;
//        auto Ar01 = tdx::get_Ar01(model, T, rho, z);
        auto Ar02 = tdx::get_Ar02(model, T, rho, molefracs);
        auto Ar11 = tdx::get_Ar11(model, T, rho, molefracs);
        auto Ar20 = tdx::get_Ar20(model, T, rho, molefracs);

        // M*w^2/(R*T) where w is the speed of sound
        // from the definition w = sqrt(dp/drho|s)
        double Mw2RT = 1 + 2*Ar01 + Ar02 - POW2(1 + Ar01 - Ar11)/(Aig20 + Ar20);
        
        auto MWvals = (Eigen::ArrayXd(21) << 16.04246, 28.0134, 44.0095, 30.06904, 44.09562, 58.1222, 58.1222, 72.14878, 72.14878, 86.17536, 100.20194, 114.22852, 128.2551, 142.28168, 2.01588, 31.9988, 28.0101, 18.01528, 34.08088, 4.002602, 39.948).finished();
        double M = (MWvals*molefracs).sum()/1000.0;
        double w_ms = sqrt(Mw2RT*R*T/M);
        CAPTURE(w_ms);
        CHECK_THAT(pGERG2008_AGA8_MPa, WithinRelMatcher(p_calc_MPa, 1e-10));
        CHECK_THAT(cvGERG2008_AGA8_JmolK, WithinRelMatcher(cv_calc_JmolK, 1e-10));
        CHECK_THAT(wGERG2008_AGA8_ms, WithinRelMatcher(w_ms, 1e-10));
        
//        CHECK_THAT(pGERG2008_AGA8_MPa, WithinRelMatcher(validation_data[i].P_MPa, 1e-5));
//        CHECK_THAT(cvGERG2008_AGA8_JmolK, WithinRelMatcher(validation_data[i].cv_JmolK, 1e-5));
//        CHECK_THAT(wGERG2008_AGA8_ms, WithinRelMatcher(validation_data[i].w_ms, 1e-5));
    }
}

TEST_CASE("Test infinite dilution case", "[GERG2008dil]"){
    std::vector<std::string> comps = {"carbondioxide", "methane"};
    auto model = GERG2008::GERG2008ResidualModel(comps);
    auto molefracs = (Eigen::ArrayXd(2) << 0, 1).finished();
    using iso = IsochoricDerivatives<decltype(model)>;
    double T = 260;
    auto grad = iso::build_Psir_gradient_autodiff(model, T, molefracs*20000);
//    std::cout << grad << std::endl;
    using my_float = boost::multiprecision::number<boost::multiprecision::cpp_bin_float<100U>>;
    Eigen::ArrayX<my_float> rhovec = (molefracs*20000).eval().cast<my_float>();
    double R = 8.314472;
    auto f = [&](const auto& rhovec){ auto rhotot = rhovec.sum(); auto z = (rhovec/rhotot).eval(); return model.alphar(T, rhotot, z)*rhotot*R*T; };
    auto grad_fd = gradient_forward(f, rhovec, 1e-16);
//    std::cout << grad_fd << std::endl;
    double max_err = (grad_fd.cast<double>()-grad.array()).abs().maxCoeff();
    CAPTURE(max_err);
    CHECK(max_err < 1e-12);
}
