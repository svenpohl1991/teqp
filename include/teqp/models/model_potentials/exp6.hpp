#pragma once

#include <valarray>
#include <map>

namespace teqp{
namespace exp6{

#include "teqp/types.hpp"

/**
Empirical EOS from:
Yosuke Kataoka,
Equation of State of the Fluid Defined by the Modified Buckingham (exp-6)
Potential Derived by Molecular Dynamics Simulations
Bulletin of the Chemical Society of Japan, 1992; 65, 2093-2103
https://doi.org/10.1246/bcsj.65.2093
 */
class Kataoka1992{
private:
    
    const std::vector<std::valarray<double>> c = {
        {1,0.0,-0.50,-0.6850148},
        {1,0.25,-0.50,0.4524021},
        {1,1.00,-0.50,-0.9978102},
        {1,2.00,-0.50,-1.7569237},
        {1,3.00,-0.50,0.5178725},
        {1,0.0,0.0,0.9798958},
        {1,0.25,0.0,2.0371027},
        {1,1.00,0.0,-5.3831902},
        {1,2.00,0.0,2.5157204},
        {1,3.00,0.0,-1.3160448},
        {1,0.0,1.50,0.1106332},
        {1,0.25,1.50,0.0221654},
        {1,1.00,1.50,-0.0927995},
        {1,2.00,1.50,0.0685976},
        {1,3.00,1.50,0.0455256},
        {2,0.0,-0.50,3.2473965},
        {2,0.25,-0.50,-7.1216450},
        {2,1.00,-0.50,6.3146334},
        {2,2.00,-0.50,3.9169369},
        {2,3.00,-0.50,-5.7430820},
        {2,0.0,0.0,-2.6474066},
        {2,0.25,0.0,6.5439167},
        {2,1.00,0.0,-4.2844410},
        {2,2.00,0.0,-0.1870927},
        {2,3.00,0.0,-0.6190643},
        {2,0.0,1.50,1.1307259},
        {2,0.25,1.50,-2.2454348},
        {2,1.00,1.50,0.9304036},
        {2,2.00,1.50,0.8111790},
        {2,3.00,1.50,-0.6701541},
        {3,0.0,-0.50,-5.2004805},
        {3,0.25,-0.50,9.9220171},
        {3,1.00,-0.50,-8.3147421},
        {3,2.00,-0.50,-10.7043695},
        {3,3.00,-0.50,16.3647919},
        {3,0.0,0.0,0.4470198},
        {3,0.25,0.0,1.8149662},
        {3,1.00,0.0,-6.1030884},
        {3,2.00,0.0,-6.6081009},
        {3,3.00,0.0,12.0017595},
        {3,0.0,1.50,-2.4980745},
        {3,0.25,1.50,6.4317245},
        {3,1.00,1.50,-0.2996140},
        {3,2.00,1.50,-4.2253304},
        {3,3.00,1.50,1.9814978},
        {4,0.0,-0.50,1.3786678},
        {4,0.25,-0.50,-3.8790855},
        {4,1.00,-0.50,1.2802448},
        {4,2.00,-0.50,15.9196701},
        {4,3.00,-0.50,-17.1450195},
        {4,0.0,0.0,1.8664589},
        {4,0.25,0.0,-2.6899223},
        {4,1.00,0.0,10.8094797},
        {4,2.00,0.0,6.9019051},
        {4,3.00,0.0,-18.3938751},
        {4,0.0,1.50,3.4184790},
        {4,0.25,1.50,-8.8453131},
        {4,1.00,1.50,-2.0526648},
        {4,2.00,1.50,6.2798786},
        {4,3.00,1.50,-2.0717278},
        {5,0.0,-0.50,1.0566063},
        {5,0.25,-0.50,-1.1453161},
        {5,1.00,-0.50,1.9671011},
        {5,2.00,-0.50,-7.9601946},
        {5,3.00,-0.50,6.1615953},
        {5,0.0,0.0,-1.5089417},
        {5,0.25,0.0,1.0174732},
        {5,1.00,0.0,-2.4891043},
        {5,2.00,0.0,-2.3425989},
        {5,3.00,0.0,8.2107668},
        {5,0.0,1.50,-1.7408895},
        {5,0.25,1.50,5.0178003},
        {5,1.00,1.50,1.4885798},
        {5,2.00,1.50,-3.0418901},
        {5,3.00,1.50,0.7206789},
    };
    const double alphastar;
    
public:
    /// Constructor
    /// \param alpha
    Kataoka1992(double alpha) : alphastar((alpha-8)/10){};
    
    // We are in "simulation units", so R is 1.0, and T and rho are T^* and rho^*
    template<typename MoleFracType>
    double R(const MoleFracType &) const { return 1.0; }
    
    /// Return the alpha parameter
    auto get_alpha() const{
        return alphastar*10+8;
    }
    
    /**
    \param Tstar \f$T^*=T/\epsilon/k \f$
    \param rhostar \f$\rho^*=\rho_{\rm N}\sigma^3 \f$
    \param molefrac mole fractions
     */
    template<typename TType, typename RhoType, typename MoleFracType>
    auto alphar(const TType& Tstar,
        const RhoType& rhostar,
        const MoleFracType& /*molefrac*/) const
    {
        std::common_type_t<TType, RhoType> o = 0.0;
        for (auto el : c){
            int p = static_cast<int>(el[0]);
            auto q = el[1], r = el[2], Apqr = el[3];
            o = o + Apqr * powi(rhostar, p) * pow(Tstar, -q) * pow(alphastar, r);
        }
        return forceeval(o);
    }
};

}
}
